export type Question = {
  id: number;
  text: string;
  type: 'mcq' | 'code';
  codeSnippet?: string;
  options?: string[];
  correctAnswer: string;
  explanation: string;
};

export type Quiz = {
  id: string;
  title: string;
  description: string;
  difficulty: 'Easy' | 'Medium' | 'Hard';
  questions: Question[];
};

export const quizzes: Quiz[] = [
  {
    id: 'c-basics-1',
    title: 'C Language Basics',
    description: 'Test your knowledge of fundamental C concepts.',
    difficulty: 'Easy',
    questions: [
      {
        id: 1,
        text: 'Which of the following is a keyword in C?',
        type: 'mcq',
        options: ['integer', 'float', 'return', 'function'],
        correctAnswer: 'return',
        explanation: "'return' is a keyword in C used to terminate a function and return a value. The others are data types or concepts, but not keywords themselves.",
      },
      {
        id: 2,
        text: 'What is the correct way to declare an integer variable named "score"?',
        type: 'mcq',
        options: ['int score;', 'integer score;', 'score int;', 'declare score as int;'],
        correctAnswer: 'int score;',
        explanation: 'In C, variables are declared with the syntax: `data_type variable_name;`. So, `int score;` is the correct way.',
      },
      {
        id: 3,
        text: 'What is the purpose of the #include <stdio.h> directive?',
        type: 'mcq',
        options: ['To define a new standard library', 'To include the source code of the stdio.h file in the current file', 'To link the standard input/output library', 'To declare standard input/output functions'],
        correctAnswer: 'To include the source code of the stdio.h file in the current file',
        explanation: 'The #include directive tells the preprocessor to include the contents of the specified file at that point in the code. For <stdio.h>, this makes standard I/O functions like printf and scanf available.',
      },
      {
        id: 4,
        text: 'Which format specifier is used to print a floating-point number?',
        type: 'mcq',
        options: ['%d', '%c', '%s', '%f'],
        correctAnswer: '%f',
        explanation: '%f is used for floats and doubles, %d for integers, %c for characters, and %s for strings.',
      },
      {
        id: 5,
        text: 'What is the result of 7 % 3 in C?',
        type: 'mcq',
        options: ['2', '1', '2.33', '0'],
        correctAnswer: '1',
        explanation: 'The modulus operator (%) gives the remainder of an integer division. 7 divided by 3 is 2 with a remainder of 1.',
      },
      {
        id: 6,
        text: 'Every statement in a C program must end with a...?',
        type: 'mcq',
        options: ['period (.)', 'colon (:)', 'semicolon (;)', 'comma (,)'],
        correctAnswer: 'semicolon (;)',
        explanation: 'The semicolon acts as a statement terminator, signaling the end of a single instruction to the compiler.',
      },
      {
        id: 7,
        text: 'What is the correct syntax for a single-line comment?',
        type: 'mcq',
        options: ['// This is a comment', '/* This is a comment */', '# This is a comment', '<!-- This is a comment -->'],
        correctAnswer: '// This is a comment',
        explanation: 'In C (from C99 standard onwards), `//` is used for single-line comments. `/* ... */` is used for multi-line comments.',
      },
      {
        id: 8,
        text: 'Which function is the entry point of every C program?',
        type: 'mcq',
        options: ['start()', 'main()', 'begin()', 'program()'],
        correctAnswer: 'main()',
        explanation: 'The execution of a C program starts from the `main()` function.',
      },
      {
        id: 9,
        text: 'What does the `sizeof` operator return?',
        type: 'mcq',
        options: ['The number of elements in an array', 'The size of a variable or data type in bytes', 'The maximum value a variable can hold', 'The memory address of a variable'],
        correctAnswer: 'The size of a variable or data type in bytes',
        explanation: '`sizeof` is a compile-time operator that returns the size (in bytes) of its operand.',
      },
      {
        id: 10,
        text: 'How do you declare a constant in C?',
        type: 'mcq',
        options: ['const int PI = 3.14;', 'constant PI = 3.14;', 'int const PI = 3.14;', 'Both A and C'],
        correctAnswer: 'Both A and C',
        explanation: 'C allows `const` to be placed either before or after the data type. So both `const int ...` and `int const ...` are valid ways to declare a constant.',
      },
      {
        id: 11,
        text: 'Which operator is used to represent logical AND?',
        type: 'mcq',
        options: ['&', '&&', '|', '||'],
        correctAnswer: '&&',
        explanation: '`&&` is the logical AND operator. `&` is the bitwise AND operator.',
      },
      {
        id: 12,
        text: 'Which loop is guaranteed to execute at least once?',
        type: 'mcq',
        options: ['for', 'while', 'do...while', 'None of the above'],
        correctAnswer: 'do...while',
        explanation: 'The `do...while` loop checks its condition at the end of the loop, so the body of the loop is always executed at least once.',
      },
      {
        id: 13,
        text: 'What is the purpose of the `break` statement?',
        type: 'mcq',
        options: ['To exit the program', 'To skip the current iteration of a loop', 'To exit from a loop or switch statement', 'To go to the next case in a switch'],
        correctAnswer: 'To exit from a loop or switch statement',
        explanation: 'The `break` statement terminates the execution of the nearest enclosing loop or switch statement.',
      },
      {
        id: 14,
        text: 'Which data type is used to store a single character?',
        type: 'mcq',
        options: ['char', 'string', 'character', 'alpha'],
        correctAnswer: 'char',
        explanation: 'The `char` data type is used to store a single character value.',
      },
      {
        id: 15,
        text: 'How is a string represented in C?',
        type: 'mcq',
        options: ['Using the String class', 'As an array of characters ending with a null character \'\\0\'', 'Using the `string` keyword', 'As a list of characters'],
        correctAnswer: 'As an array of characters ending with a null character \'\\0\'',
        explanation: 'C does not have a built-in string type. Strings are treated as arrays of characters, terminated by the null character `\\0`.',
      },
      {
        id: 16,
        text: 'What is the function of `scanf`?',
        type: 'mcq',
        options: ['To print formatted output to the console', 'To read formatted input from the console', 'To read a single character', 'To check the size of a variable'],
        correctAnswer: 'To read formatted input from the console',
        explanation: '`scanf` is used to read data from the standard input (usually the keyboard) according to a specified format.',
      },
      {
        id: 17,
        text: 'Which of the following is NOT a valid variable name in C?',
        type: 'mcq',
        options: ['_myVar', 'my_Var', 'my-Var', 'myVar1'],
        correctAnswer: 'my-Var',
        explanation: 'Variable names in C cannot contain hyphens (-). They can only contain letters, digits, and underscores (_).',
      },
      {
        id: 18,
        text: 'What is type casting?',
        type: 'mcq',
        options: ['Converting a variable from one data type to another', 'Creating a new variable', 'A way to comment code', 'A type of operator'],
        correctAnswer: 'Converting a variable from one data type to another',
        explanation: 'Type casting is an explicit conversion of a variable from one data type to another, e.g., `(float)my_integer;`',
      },
      {
        id: 19,
        text: 'Which header file is required for using dynamic memory allocation functions like `malloc`?',
        type: 'mcq',
        options: ['<stdio.h>', '<math.h>', '<stdlib.h>', '<string.h>'],
        correctAnswer: '<stdlib.h>',
        explanation: 'The standard library header `<stdlib.h>` contains declarations for functions like `malloc`, `calloc`, `realloc`, and `free`.',
      },
      {
        id: 20,
        text: 'What will be the value of `x` after `x = 5 + 3 * 2;`?',
        type: 'mcq',
        options: ['16', '11', '13', '10'],
        correctAnswer: '11',
        explanation: 'Operator precedence dictates that multiplication (*) is performed before addition (+). So, 3 * 2 is 6, and 5 + 6 is 11.',
      },
      {
        id: 21,
        text: 'Which operator has the highest precedence in C?',
        type: 'mcq',
        options: ['()', '*', '+', '='],
        correctAnswer: '()',
        explanation: 'Parentheses () for function calls and grouping have the highest precedence among the given options.',
      },
      {
        id: 22,
        text: 'What is the use of the `continue` statement?',
        type: 'mcq',
        options: ['To terminate a loop', 'To skip the rest of the current loop iteration and proceed to the next one', 'To continue to the next case in a switch', 'To halt the program'],
        correctAnswer: 'To skip the rest of the current loop iteration and proceed to the next one',
        explanation: 'The `continue` statement is used inside loops to end the current iteration and begin the next.',
      },
      {
        id: 23,
        text: 'What is the default value of a local variable in C?',
        type: 'mcq',
        options: ['0', 'NULL', 'Garbage value', 'Depends on the data type'],
        correctAnswer: 'Garbage value',
        explanation: 'If a local variable is not explicitly initialized, its value is indeterminate and is referred to as a garbage value.',
      },
      {
        id: 24,
        text: 'Which of the following is a relational operator?',
        type: 'mcq',
        options: ['+', '&&', '==', '='],
        correctAnswer: '==',
        explanation: '`==` (equal to) is a relational operator used for comparison. `=` is the assignment operator.',
      },
      {
        id: 25,
        text: 'How do you define a macro in C?',
        type: 'mcq',
        options: ['#macro PI 3.14', '#define PI 3.14', 'macro PI = 3.14', 'define PI 3.14'],
        correctAnswer: '#define PI 3.14',
        explanation: 'The `#define` preprocessor directive is used to create macros.',
      },
      {
        id: 26,
        text: 'The `void` keyword in a function declaration means...?',
        type: 'mcq',
        options: ['The function is empty', 'The function returns no value', 'The function takes no arguments', 'The function is invalid'],
        correctAnswer: 'The function returns no value',
        explanation: 'When `void` is used as a function return type, it indicates that the function does not return any value.',
      },
      {
        id: 27,
        text: 'What is an array in C?',
        type: 'mcq',
        options: ['A collection of elements of different data types', 'A collection of elements of the same data type', 'A special type of function', 'A keyword'],
        correctAnswer: 'A collection of elements of the same data type',
        explanation: 'An array is a fixed-size, sequential collection of elements of the same data type, stored in contiguous memory locations.',
      },
      {
        id: 28,
        text: 'How do you access the first element of an array named `arr`?',
        type: 'mcq',
        options: ['arr[0]', 'arr[1]', 'arr.first', 'arr(0)'],
        correctAnswer: 'arr[0]',
        explanation: 'Array indexing in C is 0-based, so the first element is at index 0.',
      },
      {
        id: 29,
        text: 'Which of these is the ternary or conditional operator?',
        type: 'mcq',
        options: [':?', '?:', '??', 'if-then-else'],
        correctAnswer: '?:',
        explanation: 'The ternary operator `?:` is a shorthand for an if-else statement. Syntax: `condition ? value_if_true : value_if_false`.',
      },
      {
        id: 30,
        text: 'What does `i++` do?',
        type: 'mcq',
        options: ['Increments `i` then uses its value', 'Uses the value of `i` then increments it', 'It is a syntax error', 'Decrements `i`'],
        correctAnswer: 'Uses the value of `i` then increments it',
        explanation: 'This is the post-increment operator. It uses the current value of the variable in the expression and then increments it.',
      },
      {
        id: 31,
        text: 'What is the difference between `a = 5` and `a == 5`?',
        type: 'mcq',
        options: ['No difference', '`=` is assignment, `==` is comparison', '`=` is comparison, `==` is assignment', '`==` is for floats only'],
        correctAnswer: '`=` is assignment, `==` is comparison',
        explanation: 'The single equals `=` is the assignment operator, which sets the value of a variable. The double equals `==` is the equality operator, which compares two values.',
      },
      {
        id: 32,
        text: 'A `switch` statement can be used with which data types?',
        type: 'mcq',
        options: ['int and char', 'float and double', 'All data types', 'Only int'],
        correctAnswer: 'int and char',
        explanation: 'The controlling expression of a switch statement must be of an integral type, which includes `int`, `char`, and `enum` types.',
      },
      {
        id: 33,
        text: 'What is the purpose of the `default` case in a `switch` statement?',
        type: 'mcq',
        options: ['It is a mandatory first case', 'It executes if none of the other cases match', 'It sets a default value for the variable', 'It is a syntax error'],
        correctAnswer: 'It executes if none of the other cases match',
        explanation: 'The `default` case provides a block of code to be executed if the switch expression does not match any of the `case` labels.',
      },
      {
        id: 34,
        text: 'How is a multi-line comment written in C?',
        type: 'mcq',
        options: ['// comment', '/* comment */', '## comment ##', '<!-- comment -->'],
        correctAnswer: '/* comment */',
        explanation: '`/*` starts a multi-line comment, and `*/` ends it. Anything between them is ignored by the compiler.',
      },
      {
        id: 35,
        text: 'Which standard library function can be used to find the length of a string?',
        type: 'mcq',
        options: ['length()', 'len()', 'strlen()', 'sizeof()'],
        correctAnswer: 'strlen()',
        explanation: 'The `strlen()` function, found in `<string.h>`, returns the length of a string (not including the null terminator).',
      },
      {
        id: 36,
        text: 'A function that calls itself is called a...?',
        type: 'mcq',
        options: ['Recursive function', 'Auto function', 'Static function', 'Looping function'],
        correctAnswer: 'Recursive function',
        explanation: 'Recursion is a programming technique where a function calls itself to solve a problem.',
      },
      {
        id: 37,
        text: 'What is the output of `printf("%d", 10 / 4);`?',
        type: 'mcq',
        options: ['2.5', '3', '2', 'Error'],
        correctAnswer: '2',
        explanation: 'When dividing two integers, C performs integer division, which truncates any fractional part. So, 10 / 4 is 2.',
      },
      {
        id: 38,
        text: 'Which operator is used for bitwise OR?',
        type: 'mcq',
        options: ['|', '||', '&', '&&'],
        correctAnswer: '|',
        explanation: '`|` is the bitwise OR operator. `||` is the logical OR operator.',
      },
      {
        id: 39,
        text: 'In a `for` loop `for(A; B; C)`, which part is the condition?',
        type: 'mcq',
        options: ['A', 'B', 'C', 'All of them'],
        correctAnswer: 'B',
        explanation: 'A is initialization, B is the condition (the loop continues as long as B is true), and C is the post-iteration step (e.g., increment/decrement).',
      },
      {
        id: 40,
        text: 'What is the `enum` keyword used for?',
        type: 'mcq',
        options: ['To create a list of integer constants', 'To declare a floating point number', 'To define a new math function', 'To allocate memory'],
        correctAnswer: 'To create a list of integer constants',
        explanation: 'Enumerations (`enum`) allow for creating a new type and defining a set of named integer constants for it.',
      },
      {
        id: 41,
        text: 'Which of the following shows the correct syntax for a `while` loop?',
        type: 'mcq',
        options: ['while(x>0) { ... }', 'while x>0 { ... }', 'do { ... } while(x>0)', 'for(while x>0) { ... }'],
        correctAnswer: 'while(x>0) { ... }',
        explanation: 'The correct syntax for a while loop is `while (condition) { statement_block }`.',
      },
      {
        id: 42,
        text: 'What does `char c = 65;` store in the variable `c`?',
        type: 'mcq',
        options: ['The number 65', 'The character \'A\'', 'A syntax error', 'The character \'6\''],
        correctAnswer: 'The character \'A\'',
        explanation: 'Characters are represented by their ASCII values. The ASCII value for the character \'A\' is 65.',
      },
      {
        id: 43,
        text: 'Which bitwise operator is suitable for turning a specific bit ON?',
        type: 'mcq',
        options: ['AND (&)', 'OR (|)', 'NOT (~)', 'XOR (^)'],
        correctAnswer: 'OR (|)',
        explanation: 'Performing a bitwise OR with a bit mask where the desired bit is 1 will turn that bit on without affecting others.',
      },
      {
        id: 44,
        text: 'What will `x >> 1` do to an unsigned integer `x`?',
        type: 'mcq',
        options: ['Multiply it by 2', 'Divide it by 2', 'Add 1 to it', 'Result in an error'],
        correctAnswer: 'Divide it by 2',
        explanation: 'The right shift operator `>>` shifts the bits to the right, which is equivalent to integer division by a power of 2.',
      },
      {
        id: 45,
        text: 'Local variables are stored in an area of memory called...?',
        type: 'mcq',
        options: ['The Heap', 'The Stack', 'Permanent storage', 'The Data Segment'],
        correctAnswer: 'The Stack',
        explanation: 'The stack is used for static memory allocation, and local variables are typically stored there.',
      },
      {
        id: 46,
        text: 'The `auto` keyword is implicitly applied to which type of variables?',
        type: 'mcq',
        options: ['Global variables', 'Local variables', 'Static variables', 'All variables'],
        correctAnswer: 'Local variables',
        explanation: 'By default, all local variables have the `auto` storage class, though the keyword itself is rarely used in modern code.',
      },
      {
        id: 47,
        text: 'A variable declared outside of all functions is called a...?',
        type: 'mcq',
        options: ['Local variable', 'Global variable', 'Static variable', 'Constant variable'],
        correctAnswer: 'Global variable',
        explanation: 'Global variables are declared outside any function and are accessible from any function within the entire program.',
      },
      {
        id: 48,
        text: 'What is the value of `EOF`?',
        type: 'mcq',
        options: ['A positive integer', 'Zero', 'A negative integer', 'A character'],
        correctAnswer: 'A negative integer',
        explanation: 'EOF (End-Of-File) is a macro defined in `<stdio.h>` that represents a non-character value returned by I/O functions to indicate the end of a file or stream. It\'s a negative integer.',
      },
      {
        id: 49,
        text: 'What is the result of `! (1 && 0)`?',
        type: 'mcq',
        options: ['1 (true)', '0 (false)', 'Undefined', '-1'],
        correctAnswer: '1 (true)',
        explanation: '`1 && 0` evaluates to 0 (false). The logical NOT operator `!` then inverts this to 1 (true).',
      },
      {
        id: 50,
        text: 'Which keyword is used to prevent a variable from being modified?',
        type: 'mcq',
        options: ['static', 'extern', 'const', 'final'],
        correctAnswer: 'const',
        explanation: 'The `const` keyword makes a variable read-only, so its value cannot be changed after initialization.',
      },
      {
        id: 51,
        text: 'What is the format specifier for a long integer?',
        type: 'mcq',
        options: ['%d', '%ld', '%Ld', '%s'],
        correctAnswer: '%ld',
        explanation: '`%ld` is used for `long int`, and `%lld` is used for `long long int`.',
      },
      {
        id: 52,
        text: 'Which function is used to concatenate two strings?',
        type: 'mcq',
        options: ['strcat()', 'strcpy()', 'strcmp()', 'strlen()'],
        correctAnswer: 'strcat()',
        explanation: '`strcat()` (string concatenation) appends one string to the end of another.',
      },
      {
        id: 53,
        text: 'What is the correct syntax to initialize all elements of an integer array of size 10 to 0?',
        type: 'mcq',
        options: ['int arr[10] = {0};', 'int arr[10] = 0;', 'int arr[10](0);', 'int arr[10]; arr = 0;'],
        correctAnswer: 'int arr[10] = {0};',
        explanation: 'When initializing an array, if you provide fewer initializers than elements, the remaining elements are automatically initialized to zero.',
      },
      {
        id: 54,
        text: 'A C preprocessor directive always begins with which character?',
        type: 'mcq',
        options: ['$', '#', '&', '%'],
        correctAnswer: '#',
        explanation: 'Preprocessor directives like #include, #define, and #if all start with the hash symbol.',
      },
      {
        id: 55,
        text: 'Which of the following is an exit-controlled loop?',
        type: 'mcq',
        options: ['for', 'while', 'do-while', 'if-else'],
        correctAnswer: 'do-while',
        explanation: 'An exit-controlled loop checks the condition after the loop body is executed. `do-while` is the only one that does this.',
      },
      {
        id: 56,
        text: 'What is the purpose of the `return 0;` statement in the `main` function?',
        type: 'mcq',
        options: ['It returns the value 0 to the calling function.', 'It indicates the program executed successfully.', 'It stops the program.', 'It is a syntax requirement with no real meaning.'],
        correctAnswer: 'It indicates the program executed successfully.',
        explanation: 'By convention, a return value of 0 from `main` indicates that the program terminated without errors.',
      },
      {
        id: 57,
        text: 'What is the range of the `char` data type?',
        type: 'mcq',
        options: ['-128 to 127', '0 to 255', '0 to 65535', 'Depends on the compiler'],
        correctAnswer: '-128 to 127',
        explanation: 'A `signed char` typically has a range of -128 to 127. An `unsigned char` has a range of 0 to 255.',
      },
      {
        id: 58,
        text: 'Which function prototype is valid in C?',
        type: 'mcq',
        options: ['function myFunc();', 'int myFunc();', 'myFunc() int;', 'def myFunc(): int'],
        correctAnswer: 'int myFunc();',
        explanation: 'A function prototype must specify the return type, the function name, and optionally the parameter types. `int myFunc();` is a valid prototype for a function returning an integer.',
      },
      {
        id: 59,
        text: 'What does the `&` operator do when used in `scanf`? For example: `scanf("%d", &num);`',
        type: 'mcq',
        options: ['It dereferences the variable `num`.', 'It passes the value of `num`.', 'It passes the memory address of `num`.', 'It creates a copy of `num`.'],
        correctAnswer: 'It passes the memory address of `num`.',
        explanation: '`scanf` needs the memory address of the variable to store the input value. The address-of operator `&` provides this.',
      },
      {
        id: 60,
        text: 'Which data structure is implemented by an array?',
        type: 'mcq',
        options: ['Linked List', 'Stack', 'Tree', 'Graph'],
        correctAnswer: 'Stack',
        explanation: 'While an array is a basic data structure itself, it is commonly used to implement other linear data structures like stacks and queues.',
      },
      {
        id: 61,
        text: 'What is the ASCII value of the null character `\\0`?',
        type: 'mcq',
        options: ['65', '48', '32', '0'],
        correctAnswer: '0',
        explanation: 'The null character, used to terminate strings, has an ASCII value of 0.',
      },
      {
        id: 62,
        text: 'The `extern` keyword is used to...?',
        type: 'mcq',
        options: ['Declare a variable that is defined in another file.', 'Make a variable local.', 'Make a variable constant.', 'Allocate memory externally.'],
        correctAnswer: 'Declare a variable that is defined in another file.',
        explanation: '`extern` provides a reference to a global variable that is defined elsewhere, typically in another source file.',
      },
      {
        id: 63,
        text: 'What is the output of `(float)10 / 4`?',
        type: 'mcq',
        options: ['2', '2.000000', '2.500000', '3'],
        correctAnswer: '2.500000',
        explanation: 'Casting one of the integers to a float forces the operation to be floating-point division, resulting in a non-truncated answer.',
      },
      {
        id: 64,
        text: 'If `int a = 10, b = 20;`, what is the value of `a > b ? a : b;`?',
        type: 'mcq',
        options: ['10', '20', 'true', 'false'],
        correctAnswer: '20',
        explanation: 'The ternary operator checks if `a > b`. Since 10 is not greater than 20, the condition is false, and the expression evaluates to the value after the colon, which is `b` (20).',
      },
      {
        id: 65,
        text: 'Which header file should you include to use functions like `sqrt()` and `pow()`?',
        type: 'mcq',
        options: ['<stdlib.h>', '<stdio.h>', '<math.h>', '<conio.h>'],
        correctAnswer: '<math.h>',
        explanation: 'The `<math.h>` header file contains declarations for common mathematical functions.',
      },
      {
        id: 66,
        text: 'What is a "dangling pointer"?',
        type: 'mcq',
        options: ['A pointer that points to a valid memory location.', 'A pointer initialized to NULL.', 'A pointer that points to a memory location that has been freed.', 'A pointer that has not been initialized.'],
        correctAnswer: 'A pointer that points to a memory location that has been freed.',
        explanation: 'A dangling pointer arises when you deallocate a block of memory, but still have a pointer that points to where that memory used to be. Using it can cause crashes or undefined behavior.',
      },
      {
        id: 67,
        text: 'The `static` keyword applied to a local variable means...?',
        type: 'mcq',
        options: ['The variable cannot be changed.', 'The variable is visible only within that file.', 'The variable retains its value between function calls.', 'The variable is created on the heap.'],
        correctAnswer: 'The variable retains its value between function calls.',
        explanation: 'A static local variable is initialized only once and keeps its value across multiple calls to the function.',
      },
      {
        id: 68,
        text: 'Which of the following is NOT a fundamental data type in C?',
        type: 'mcq',
        options: ['int', 'float', 'string', 'char'],
        correctAnswer: 'string',
        explanation: 'C does not have a native `string` data type. Strings are handled as arrays of characters.',
      },
      {
        id: 69,
        text: 'What is the primary difference between a `struct` and a `union`?',
        type: 'mcq',
        options: ['`struct` can have functions, `union` cannot.', 'All members of a `struct` are stored in separate memory locations, while `union` members share the same memory location.', '`struct` is a keyword, `union` is not.', 'There is no difference.'],
        correctAnswer: 'All members of a `struct` are stored in separate memory locations, while `union` members share the same memory location.',
        explanation: 'A `union` is only as large as its largest member, as all members occupy the same memory space. A `struct` is the size of all its members combined.',
      },
      {
        id: 70,
        text: 'The `goto` statement causes...',
        type: 'mcq',
        options: ['the program to terminate.', 'the program to jump to a labeled statement.', 'the current function to exit.', 'the next iteration of a loop to start.'],
        correctAnswer: 'the program to jump to a labeled statement.',
        explanation: '`goto` provides an unconditional jump to a labeled statement within the same function. Its use is generally discouraged in favor of structured control flow.',
      },
      {
        id: 71,
        text: 'What will `x << 2` do to an unsigned integer `x`?',
        type: 'mcq',
        options: ['Divide it by 4', 'Multiply it by 4', 'Add 2 to it', 'Subtract 2 from it'],
        correctAnswer: 'Multiply it by 4',
        explanation: 'The left shift operator `<< n` is equivalent to multiplying by 2^n. So, `x << 2` is equivalent to `x * 4`.',
      },
      {
        id: 72,
        text: 'Which of the following is a valid way to initialize a character array with a string?',
        type: 'mcq',
        options: ['char str[] = "hello";', 'char str[5] = "hello";', 'char str[]; str = "hello";', 'char str(5) = "hello";'],
        correctAnswer: 'char str[] = "hello";',
        explanation: '`char str[] = "hello";` correctly initializes the array with the string literal, automatically sizing the array to 6 characters (5 for "hello" + 1 for \'\\0\'). `char str[5] = "hello";` would not leave room for the null terminator.',
      },
      {
        id: 73,
        text: 'What is the purpose of `typedef`?',
        type: 'mcq',
        options: ['To define a new variable.', 'To create an alias for an existing data type.', 'To check the type of a variable.', 'To perform type casting.'],
        correctAnswer: 'To create an alias for an existing data type.',
        explanation: '`typedef` is used to give a new name to an existing data type, which can improve code readability. For example, `typedef unsigned char BYTE;`',
      },
      {
        id: 74,
        text: 'The bitwise XOR operator is represented by...?',
        type: 'mcq',
        options: ['~', '&', '|', '^'],
        correctAnswer: '^',
        explanation: 'The `^` character is used for the bitwise XOR operation.',
      },
      {
        id: 75,
        text: 'What is the value of `x` after the following code? `int x = 10; x += 5;`',
        type: 'mcq',
        options: ['10', '5', '15', 'Error'],
        correctAnswer: '15',
        explanation: 'The `+=` operator is a compound assignment operator. `x += 5` is shorthand for `x = x + 5`.',
      },
      {
        id: 76,
        text: 'Which function is used to copy one string to another?',
        type: 'mcq',
        options: ['strcat()', 'strcpy()', 'strcopy()', 'strassign()'],
        correctAnswer: 'strcpy()',
        explanation: 'The `strcpy()` function from `<string.h>` is used to copy the contents of one string into another.',
      },
      {
        id: 77,
        text: 'An uninitialized pointer is known as a...?',
        type: 'mcq',
        options: ['Null pointer', 'Dangling pointer', 'Void pointer', 'Wild pointer'],
        correctAnswer: 'Wild pointer',
        explanation: 'A wild pointer points to an arbitrary, unknown memory location because it was not initialized. Using it is dangerous.',
      },
      {
        id: 78,
        text: 'What does the function `getchar()` do?',
        type: 'mcq',
        options: ['Prints a character to the screen', 'Reads a single character from the standard input', 'Reads a full string', 'Returns a random character'],
        correctAnswer: 'Reads a single character from the standard input',
        explanation: '`getchar()` reads the next character from stdin and returns it as an integer.',
      },
      {
        id: 79,
        text: 'Which is the correct order of evaluation for logical operators?',
        type: 'mcq',
        options: ['AND, OR, NOT', 'NOT, AND, OR', 'OR, AND, NOT', 'They have the same precedence'],
        correctAnswer: 'NOT, AND, OR',
        explanation: 'The logical NOT `!` has the highest precedence, followed by logical AND `&&`, and finally logical OR `||`.',
      },
      {
        id: 80,
        text: 'What is `argc` in the `main` function `int main(int argc, char *argv[])`?',
        type: 'mcq',
        options: ['Argument character count', 'Argument count', 'Argument check', 'A pointer to the arguments'],
        correctAnswer: 'Argument count',
        explanation: '`argc` is an integer that holds the number of command-line arguments passed to the program, including the program name itself.',
      },
      {
        id: 81,
        text: 'What is `argv` in the `main` function `int main(int argc, char *argv[])`?',
        type: 'mcq',
        options: ['A list of argument values', 'An array of character pointers (strings)', 'Argument version', 'The return value'],
        correctAnswer: 'An array of character pointers (strings)',
        explanation: '`argv` is an "argument vector". It is an array of pointers to strings, where each string is one of the command-line arguments.',
      },
      {
        id: 82,
        text: 'What does `++i` do?',
        type: 'mcq',
        options: ['Increments `i` then uses its new value', 'Uses the value of `i` then increments it', 'It is a syntax error', 'It is the same as `i++`'],
        correctAnswer: 'Increments `i` then uses its new value',
        explanation: 'This is the pre-increment operator. It increments the value of the variable first and then uses the new value in the expression.',
      },
      {
        id: 83,
        text: 'In C, what is the size of the `double` data type?',
        type: 'mcq',
        options: ['4 bytes', '8 bytes', '2 bytes', 'Depends on the system'],
        correctAnswer: '8 bytes',
        explanation: 'While sizes can technically be system-dependent, a `double` is almost universally 8 bytes on modern systems, providing double the precision of a `float`.',
      },
      {
        id: 84,
        text: 'The modulus operator `%` can be used with which data types?',
        type: 'mcq',
        options: ['int only', 'float only', 'int and float', 'All data types'],
        correctAnswer: 'int only',
        explanation: 'The modulus operator is defined only for integer operands in C.',
      },
      {
        id: 85,
        text: 'What is the value of `(5 < 3) && (3 > 2)`?',
        type: 'mcq',
        options: ['1', '0', 'True', 'Error'],
        correctAnswer: '0',
        explanation: 'The logical AND `&&` uses short-circuit evaluation. Since `(5 < 3)` is false (0), the second part of the expression is not evaluated, and the result is 0 (false).',
      },
      {
        id: 86,
        text: 'What is the function `strcmp()` used for?',
        type: 'mcq',
        options: ['To copy a string', 'To combine two strings', 'To compare two strings', 'To find the length of a string'],
        correctAnswer: 'To compare two strings',
        explanation: '`strcmp()` compares two strings lexicographically and returns 0 if they are equal, a negative value if the first string is less than the second, and a positive value otherwise.',
      },
      {
        id: 87,
        text: 'Which function would you use to allocate memory for an array and initialize it to zero?',
        type: 'mcq',
        options: ['malloc()', 'realloc()', 'calloc()', 'free()'],
        correctAnswer: 'calloc()',
        explanation: '`calloc()` (contiguous allocation) allocates memory for a number of elements of a certain size and initializes all bytes in the allocated memory to zero.',
      },
      {
        id: 88,
        text: 'What is the correct way to pass an array to a function?',
        type: 'mcq',
        options: ['By passing the array as a pointer', 'By copying the entire array', 'It is not possible to pass arrays', 'By using the `&` operator on the array name'],
        correctAnswer: 'By passing the array as a pointer',
        explanation: 'When you pass an array to a function, what is actually passed is a pointer to the first element of the array.',
      },
      {
        id: 89,
        text: 'In the expression `p->m`, `p` must be a...?',
        type: 'mcq',
        options: ['struct or union variable', 'pointer to a struct or union', 'integer', 'array name'],
        correctAnswer: 'pointer to a struct or union',
        explanation: 'The arrow operator `->` is used to access members of a `struct` or `union` via a pointer to that `struct` or `union`.',
      },
      {
        id: 90,
        text: 'What is the bitwise complement operator?',
        type: 'mcq',
        options: ['!', '~', '^', '&'],
        correctAnswer: '~',
        explanation: 'The tilde `~` is the bitwise NOT or complement operator. It flips every bit in its operand.',
      },
      {
        id: 91,
        text: 'What is `void *`?',
        type: 'mcq',
        options: ['A pointer to nothing', 'An invalid pointer', 'A generic pointer that can point to any data type', 'A pointer to a function that returns nothing'],
        correctAnswer: 'A generic pointer that can point to any data type',
        explanation: 'A `void` pointer is a generic pointer that can hold the address of any data type. It must be cast to another pointer type before being dereferenced.',
      },
      {
        id: 92,
        text: 'How can you find out the number of elements in an array `arr` if the size is known at compile time?',
        type: 'mcq',
        options: ['`sizeof(arr)`', '`sizeof(arr) / sizeof(arr[0])`', '`strlen(arr)`', 'It is not possible'],
        correctAnswer: '`sizeof(arr) / sizeof(arr[0])`',
        explanation: 'This expression divides the total size of the array in bytes by the size of a single element in bytes, yielding the number of elements.',
      },
      {
        id: 93,
        text: 'Which header file is necessary to use the `isalpha()` function?',
        type: 'mcq',
        options: ['<stdio.h>', '<stdlib.h>', '<string.h>', '<ctype.h>'],
        correctAnswer: '<ctype.h>',
        explanation: 'The `<ctype.h>` header contains functions for testing and mapping characters, such as `isalpha()`, `isdigit()`, `isspace()`, etc.',
      },
    ],
  },
  {
    id: 'c-pointers-1',
    title: 'Pointers in C',
    description: 'Dive into the world of pointers and memory management.',
    difficulty: 'Medium',
    questions: [
      {
        id: 1,
        text: 'Which operator is used to get the memory address of a variable?',
        type: 'mcq',
        options: ['*', '&', '->', '.'],
        correctAnswer: '&',
        explanation: 'The `&` (ampersand) operator is the "address-of" operator. It returns the memory address of a variable.',
      },
      {
        id: 2,
        text: 'What will be the output of this code?',
        type: 'code',
        codeSnippet: '#include <stdio.h>\n\nint main() {\n    int var = 10;\n    int *p;\n    p = &var;\n    printf("%d", *p);\n    return 0;\n}',
        correctAnswer: '10',
        explanation: 'The pointer `p` holds the address of `var`. The `*p` dereferences the pointer, giving the value stored at that address, which is 10.',
      },
       {
        id: 3,
        text: 'A pointer that is not assigned to any variable is called a...?',
        type: 'mcq',
        options: ['Null Pointer', 'Void Pointer', 'Wild Pointer', 'Dangling Pointer'],
        correctAnswer: 'Wild Pointer',
        explanation: 'A wild pointer is a pointer that has not been initialized. Attempting to use it can lead to unpredictable behavior.',
      },
    ],
  },
  {
    id: 'c-advanced-1',
    title: 'Advanced C Topics',
    description: 'Challenge yourself with advanced C programming questions.',
    difficulty: 'Hard',
    questions: [
      {
        id: 1,
        text: 'What is the purpose of the `volatile` keyword?',
        type: 'mcq',
        options: [
          'To prevent the compiler from optimizing the variable.',
          'To declare a variable that cannot be modified.',
          'To create a variable that is visible to all functions.',
          'To allocate memory from the heap.',
        ],
        correctAnswer: 'To prevent the compiler from optimizing the variable.',
        explanation: 'The `volatile` keyword tells the compiler that a variable\'s value may change at any time without any action being taken by the code the compiler finds nearby. This is important for variables used in interrupt service routines or shared between threads.',
      },
      {
        id: 2,
        text: 'What does the `realloc` function do if it fails to allocate memory?',
        type: 'code',
        codeSnippet: '#include <stdlib.h>\n\n// What does realloc return on failure?',
        correctAnswer: 'NULL',
        explanation: 'If `realloc` fails to resize the memory block, it returns a NULL pointer, and the original memory block is left unchanged.',
      },
    ],
  },
];

export const getQuizById = (id: string): Quiz | undefined => {
  return quizzes.find((quiz) => quiz.id === id);
};
